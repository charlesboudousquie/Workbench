/*!***************************************************************************************
\file       QueryableInterface.hpp
\author     Cole Astaire
\date       8/25/18
\copyright  All content © 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief      Declares all interfacing properties to be defined by relevant classes
*****************************************************************************************/
#pragma once

//========1st Party Includes============================================================//
#include <string>
#include <vector>

//========3rd Party Includes============================================================//

////////==========================================================================////////
////////  Classes                                                                 ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: queryableInterface
\brief   This class declares the functions required by the Telemetry System to query
		 objects for relevant data. The interface allows each inheriting class to define
		 which data is accessible, and how to provide it. 
*****************************************************************************************/
class queryableInterface
{
	////////========================================================================////////
	////////   Public                                                               ////////
	////////========================================================================////////
public:

	//////==============================================================================//////
	//////    (Non-)Static                                                              //////
	//////==============================================================================//////

	/*!***************************************************************************************
	\brief  Retrieves the type of the object
	\return string - Returns the type by string
	*****************************************************************************************/
	virtual std::string getQueryableType() = 0;

	/*!***************************************************************************************
	\brief  Retrieves the ID of the object
	\return string - ID code
	*****************************************************************************************/
	virtual std::string getQueryableID() = 0;

	/*!***************************************************************************************
	\brief  Retrieves a property of the object by name
	\param p_name the name of the property(data)
	\return string - Returns the desired data
	*****************************************************************************************/
	virtual std::string getQueryableProperty(std::string p_name) = 0;

	/*!***************************************************************************************
	\brief  Retrieves the type of the object
	\return string - Returns the type by string
	*****************************************************************************************/
	virtual std::vector<std::string> getQueryablePropertyNames() = 0;

	////////========================================================================////////
	////////   Private                                                              ////////
	////////========================================================================////////
private:

	//////==============================================================================//////
	//////    (Non-)Static                                                              //////
	//////==============================================================================//////

};



