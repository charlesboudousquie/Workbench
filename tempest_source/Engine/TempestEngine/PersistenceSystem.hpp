/*!***************************************************************************************
\file       PersistenceSystem.hpp
\author     Michael-Paul Moore
\date       8/2/18
\copyright  All content © 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief  Handles all loading & saving, but how?
*****************************************************************************************/

#pragma once

//========1st Party Includes============================================================//
#include "SystemBase.hpp"

//========3rd Party Includes============================================================//
#include <functional>
#include <filesystem>
#include "SceneManagement/SceneSystem.hpp"
#include <Reflection.hpp>

#include "Message.hpp"

//========Forward Deceleration==========================================================//
class jsonSerialization;

////////==========================================================================////////
////////  Class                                                                   ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: classExample
\brief   This is a stub class to be used as a template / example for class formating.
*****************************************************************************************/
class persistenceSystem final : public systemBase
{

	///////============================================================================///////
	///////   Public                                                                   ///////
	///////============================================================================///////
	public:

		////////==========================================================================////////
		////////  Enum                                                                    ////////
		////////==========================================================================////////

		/*!***************************************************************************************
		\par enum: messageTypes
		\brief   Contains valid message codes that Persistence System uses.
		*****************************************************************************************/
		enum messageCodes
		{
			save_game_object,
			load_game_object,
			save_space,
			load_space,
			save_scene,
			load_scene,
		};

		//////==============================================================================//////
		//////    Static                                                                    //////
		//////==============================================================================//////

		/////================================================================================/////
		/////     Data                                                                       /////
		/////================================================================================/////

		////==================================================================================////
		////      Non-Configurable                                                            ////
		////==================================================================================////

	/*!***************************************************************************************
	\brief  retrieves the name of this system. There are two versions for the same functionality
			so that we can get the name from the class as well as an instance
	\return the name of the s
	*****************************************************************************************/
		static const std::string& getName() { static const std::string n("persistenceSystem"); return n; }
		virtual const std::string& name() const override { return getName(); }
		void onHandleMessage(message& p_message) override;

		//////==============================================================================//////
		//////    Non-Static                                                                //////
		//////==============================================================================//////

		/////================================================================================/////
		/////     Functions                                                                  /////
		/////================================================================================/////

		////==================================================================================////
		////      Overridden                                                                  ////
		////==================================================================================////

		//======================================================================================//
		//        Helper                                                                        //
		//======================================================================================//

		void onUpdate() override;

		////==================================================================================////
		////      Non-Virtual                                                                 ////
		////==================================================================================////

		//======================================================================================//
		//        Constructor                                                                   //
		//======================================================================================//
		persistenceSystem();

		//======================================================================================//
		//        Helper                                                                        //
		//======================================================================================//

		/*!***************************************************************************************
		\brief Give it the object and work you want to do and it immediately converts it to a
		       string.
		\param p_object - Object to convert to stream.
		\param p_write_function - dat old boring int
		\return Stream as a string of object.
		*****************************************************************************************/
		std::string objectToStream(void *p_object,
		                           const std::function<std::string(void*)> &p_write_function);

		const std::string &getDataLocation() const;

		static void writeToFile(const std::string p_data, const std::string p_folder, const std::string p_file_name);
		static typeRT readFromFile(const std::filesystem::path p_folder,
									const std::filesystem::path p_file_name);

		//======================================================================================//
		//        Destructor                                                                    //
		//======================================================================================//

		/*!***************************************************************************************
		\brief  Cleans up.
		*****************************************************************************************/
		~persistenceSystem();

	///////============================================================================///////
	///////   Private                                                                  ///////
	///////============================================================================///////
	private:

		/////================================================================================/////
		/////     Data                                                                       /////
		/////================================================================================/////

		////==================================================================================////
		////      Configurable                                                                ////
		////==================================================================================////

		std::string m_data_location = "data/"; //!< Location of data folder
		jsonSerialization *m_json_searializer;
		std::shared_ptr<sceneSystem>* m_scene_system;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*!***************************************************************************************
\par class: persistencRequest
\brief   A component that handles a request to the persistence system.
*****************************************************************************************/

