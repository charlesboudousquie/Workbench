/*!***************************************************************************************
\file       VertexArrayManager.hpp
\author     Cody Cannell
\date       6/19/18
\copyright  All content © 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief      Manages all the VAO objects on the CPU.
*****************************************************************************************/
#pragma once

//========Self Include==================================================================//
//========1st Party Includes============================================================//
//========3rd Party Includes============================================================//
#include <string>
#include <memory>
#include <unordered_map>

//========Types=========================================================================//
//========Defines=======================================================================//
//========Forward Deceleration==========================================================//
class vertexArrayObject;
class mesh;
class triangleMesh;
enum class  primitiveType;
class assetHandle;

/////////========================================================================/////////
///////// Namespace                                                              /////////
/////////========================================================================/////////

////////==========================================================================////////
////////  Struct / Class                                                          ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: vertexArrayManager
\brief      Manages all the VAO objects on the CPU.
*****************************************************************************************/
class vertexArrayManager
{

	///////============================================================================///////
	///////   Public                                                                   ///////
	///////============================================================================///////

public:

	vertexArrayManager() = default;
	//======================================================================================//
	//        Destructor                                                                    //
	//======================================================================================//

	/*!***************************************************************************************
	\brief  destructor that clears the map
	*****************************************************************************************/
	~vertexArrayManager();

	/////================================================================================/////
	/////     Functions                                                                  /////
	/////================================================================================/////


	//======================================================================================//
	//        Getters & Setters                                                             //
	//======================================================================================//

	/*!***************************************************************************************
	\brief  Gets VAO from Map
	\param  p_type - the vao primitive type we are looking for (ex bunny)
	\return A shared pointer to the VAO in the map
	*****************************************************************************************/
	std::shared_ptr<vertexArrayObject> const getVertexArrayBuffer(const std::string p_assetName);

	std::shared_ptr<vertexArrayObject> buildFullScreenQuad(const std::string p_assetHandle);

	///////============================================================================///////
	///////   Private                                                                  ///////
	///////============================================================================///////

private:

	/*!***************************************************************************************
	\brief  Creats a new VAO form a mesh
	\param  mesh   - Mesh we are building
	\param  p_type - The primitiveType we are storing(ex bunny)
	\return A shared pointer to the newly constructed VAO
	*****************************************************************************************/
	std::shared_ptr<vertexArrayObject> createArrayBuffer(assetHandle p_assetHandle);

	std::shared_ptr<vertexArrayObject> buildVAO(triangleMesh * p_mesh);

	/////================================================================================/////
	/////    Data                                                                        /////
	/////================================================================================/////
	std::unordered_map<std::string, std::shared_ptr<vertexArrayObject> > m_vertexArrayBuffers; //!< map that holds VAO's

};

