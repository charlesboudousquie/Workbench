/*!***************************************************************************************
\file       VertexArrayObject.hpp
\author     Cody Cannell
\date       6/19/18
\copyright  All content Â© 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief  This is a work in progress example sheet for section headers.
*****************************************************************************************/
#pragma once
//========Self Include==================================================================//
//========1st Party Includes============================================================//
#include "VertexBufferObject.hpp"
#include "IndexBufferObject.hpp"

//========3rd Party Includes============================================================//
//========Types=========================================================================//
//========Defines=======================================================================//
//========Forward Deceleration==========================================================//
class mesh;
enum class topology;

////////==========================================================================////////
////////   Class                                                          ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: vertexArrayObject
\brief      This is a stub class to be used as a template / example for class formating.
*****************************************************************************************/
class vertexArrayObject 
{

    ///////============================================================================///////
    ///////   Public                                                                   ///////
    ///////============================================================================///////
public:


    //======================================================================================//
    //     Constructors                                                                     //
    //======================================================================================//

    /*!***************************************************************************************
    \brief  VAO constructor
    \param  vertexCount    - number of vertex for building buffer size
    \param  primitiveCount - the number of primitive shapes (eg. triangle)
    \param  vertexSize     - the size of a vertex
    \param topology        - what shap we are using
    *****************************************************************************************/
    vertexArrayObject(size_t vertexCount, size_t primitiveCount, size_t vertexSize, topology topology);

    /*!***************************************************************************************
    \brief  Copy constructor (deleted)
    \param  other - the object to copy from
    *****************************************************************************************/
    vertexArrayObject(vertexArrayObject const & other) = delete;

    /*!***************************************************************************************
    \brief  Assigment operator ( delete)
    \param  other - the object to assign from
    \return A ref of the VAO
    *****************************************************************************************/
    vertexArrayObject & operator=(vertexArrayObject const & other) = delete;

    /*!***************************************************************************************
    \brief  
    *****************************************************************************************/
    ~vertexArrayObject();

    //void build(Mesh * mesh)

    //======================================================================================//
    //        Getters & Setters                                                             //
    //======================================================================================//

    /*!***************************************************************************************
    \brief  Gets the IBO
    \return ref to the IBO
    *****************************************************************************************/
    indexBufferObject& getIndexBufferObject() { return m_ibo; }

    /*!***************************************************************************************
    \brief  Gets VBO
    \return ref to the VBO
    *****************************************************************************************/
    vertexBufferObject& getVertexBufferObject() { return m_vbo; }

    /////================================================================================/////
    /////     Functions                                                                  /////
    /////================================================================================/////

    /*!***************************************************************************************
    \brief  Builds VAO on GPU
    \param mesh - The mesh you want to build
    *****************************************************************************************/
    void build(const mesh * mesh);

    /*!***************************************************************************************
    \brief  Binds CPU VAO to GPU VAO
    *****************************************************************************************/
    void bind();

    /*!***************************************************************************************
    \brief  Calls glDrawElements
    *****************************************************************************************/
    void render();

    /*!***************************************************************************************
    \brief  Unbinds from GPU VAO
    *****************************************************************************************/
    void unbind();

	mesh const* lastBuilt() const;

    ///////============================================================================///////
    ///////    Private                                                                 ///////
    ///////============================================================================///////
private:

    /////================================================================================/////
    /////     Data                                                                       /////
    /////================================================================================/////
    unsigned m_handle;           //!< handle to GPU VAO

    indexBufferObject m_ibo;     //!< IBO
    vertexBufferObject m_vbo;    //!< VBO

	mesh const* m_mesh{ nullptr }; //!< the mesh last used to build
}; 
