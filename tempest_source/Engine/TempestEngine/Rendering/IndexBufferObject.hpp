/*!***************************************************************************************
\file       IndexBufferObject.hpp
\author     Cody Cannell
\date       6/19/18
\copyright  All content Â© 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief      The CPU side repersentation of the GPU buffer object that hold index data
*****************************************************************************************/
#pragma once
//========Self Include==================================================================//
//========1st Party Includes============================================================//
#include "Buffer.hpp"
//========3rd Party Includes============================================================//
//========Types=========================================================================//
//========Defines=======================================================================//
//========Forward Deceleration==========================================================//

////////==========================================================================////////
////////  Struct / Class                                                          ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: topology
\brief   enum class that repersents what type of primitive(# of indecies) is being used
*****************************************************************************************/
enum class topology { enm_lines = 2, enm_triangle = 3 };

/*!***************************************************************************************
\par class: indexBufferObject
\brief   This is a stub class to be used as a template / example for class formating.
*****************************************************************************************/
class indexBufferObject : public iBuffer
{
    ///////========================================================================///////
    ///////   Public/Protected/Private                                             ///////
    ///////========================================================================///////
public:

    //==================================================================================//
    //        Constructors                                                              //
    //==================================================================================//
    
    /*!***************************************************************************************
    \brief  default constructor
    \param  p_topology        - how many vertex in primitive
    \param  p_primitiveCount  - how many vertex in shape
    *****************************************************************************************/
    indexBufferObject(topology p_topology, size_t p_primitiveCount);

    /*!***************************************************************************************
    \brief  copy constructor (delete)
    \param  p_other - index buffer to be copied
    *****************************************************************************************/
    indexBufferObject(indexBufferObject const & p_other) = delete;

    /*!***************************************************************************************
    \brief   Assignment operator(delete)
    \param   p_other - Rhs which will be assigned to replace this object
    \return  Index buffer getting assigned to (this)
    *****************************************************************************************/
    indexBufferObject & operator=(indexBufferObject const & p_other) = delete;

    /*!***************************************************************************************
    \brief destructor(override) cleans up the GPU side object
    *****************************************************************************************/
    ~indexBufferObject() override;

    
    //======================================================================================//
    //         Getters & Setters                                                            //
    //======================================================================================//

    /*!***************************************************************************************
    \brief   Gets the size of the buffer
    \return  copy of the size of the buffer
    *****************************************************************************************/
    size_t getBufferSize() const override;

    /*!***************************************************************************************
    \brief   Gets the typology type
    \return  Copy of the topology
    *****************************************************************************************/
    topology getTopology() const { return m_topology; }

    /*!***************************************************************************************
    \brief   gets the number of indices 
    \return  copy of the number of indices
    *****************************************************************************************/
    size_t getIndexCount() const { return m_indexCount; }

    /////============================================================================/////
    /////     Functions                                                              /////
    /////============================================================================/////

    /*!***************************************************************************************
    \brief  Builds the object on the gpu
    *****************************************************************************************/
    void build() override;

    /*!***************************************************************************************
    \brief  Binds to the GPU side object
    *****************************************************************************************/
    void bind() override;

    /*!***************************************************************************************
    \brief  Unbinds from the GPU side object
    *****************************************************************************************/
    void unbind() const override;

    /*!***************************************************************************************
    \brief  Helper Destructor for CPU object
    *****************************************************************************************/
    void shutdown() override;

    /*!***************************************************************************************
    \brief  Adds a line to the buffer
    \param p_a - index a of the line
    \param p_b - index b of the line
    *****************************************************************************************/
    void addLine(unsigned p_a, unsigned p_b);

    /*!***************************************************************************************
    \brief  Adds a triangle to the buffer
    \param p_a - index a of the line
    \param p_b - index b of the line
    \param p_c - index c of the line
    *****************************************************************************************/
    void addTriangle(unsigned p_a, unsigned p_b, unsigned p_c);

///////============================================================================///////
///////   Private                                                                  ///////
///////============================================================================///////
private:

    /////============================================================================/////
    /////     Data                                                                   /////
    /////============================================================================/////
    topology m_topology;                    //!< typology of the object
    size_t m_indexCount;                    //!< the number of indices                
    size_t m_insertOffset;                  //!< the offset into the buffer
    size_t m_bufferSize;                    //!< the size of the buffer
    char * m_buffer;                        //!< the buffer that hold index info
    unsigned m_handle;                      //!< the handle to the GPU side object
};
