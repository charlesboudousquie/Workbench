/*!***************************************************************************************
\file       VertexBufferObject.hpp
\author     Cody Cannell
\date       6/19/18
\copyright  All content Â© 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief      Holds all the vertex data for the object.
*****************************************************************************************/
#pragma once
//========Self Include==================================================================//
//========1st Party Includes============================================================//
#include "Buffer.hpp"
#include "glm/vec3.hpp"
//========3rd Party Includes============================================================//
//========Types=========================================================================//
//========Defines=======================================================================//
//========Forward Deceleration==========================================================//
struct vector3;

/////////========================================================================/////////
///////// Namespace                                                              /////////
/////////========================================================================/////////

////////==========================================================================////////
////////   Class                                                                  ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: vertexBufferObject
\brief      Holds all the vertex data for the object.
*****************************************************************************************/
class vertexBufferObject : public iBuffer
{

    ///////============================================================================///////
    ///////   Public                                                                   ///////
    ///////============================================================================///////
public:

    //======================================================================================//
    //        Constructor /  Destructor                                                     //
    //======================================================================================//

    /*!***************************************************************************************
    \brief  
    \param  p_vertexCount
    \param  p_vertexSize
    *****************************************************************************************/
    vertexBufferObject(size_t p_vertexCount, size_t p_vertexSize);

    /*!***************************************************************************************
    \brief  No Copy Constructor( deleted)
    \param  p_other - rhs
    *****************************************************************************************/
    vertexBufferObject(vertexBufferObject const & p_other) = delete;

    /*!***************************************************************************************
    \brief  No operator= (deleted)
    \param  p_other - rhs
    \return the constructed object
    *****************************************************************************************/
    vertexBufferObject & operator=(vertexBufferObject const & p_other) = delete;

    /*!***************************************************************************************
    \brief Destructor deletes object on GPU and deletes buffer on CPU
    *****************************************************************************************/
    ~vertexBufferObject() override;

    //======================================================================================//
    //        Getters & Setters                                                             //
    //======================================================================================//

    /*!***************************************************************************************
    \brief  Gets the size of the buffer
    \return Size of buffer
    *****************************************************************************************/
    size_t getBufferSize() const override;

    /////================================================================================/////
    /////     Functions                                                                  /////
    /////================================================================================/////

    /*!***************************************************************************************
    \brief  Builds the VBO on the GPU
    *****************************************************************************************/
    void build() override;

    /*!***************************************************************************************
    \brief  Binds the the VBO on the GPU
    *****************************************************************************************/
    void bind() override;

    /*!***************************************************************************************
    \brief  Unbinds from VBO on GPU
    *****************************************************************************************/
    void unbind() const override;

    /*!***************************************************************************************
    \brief  Runs shutdown process deleteing VBO from GPU
    *****************************************************************************************/
    void shutdown() override;

    /*!***************************************************************************************
    \brief  Adds vertex to VBO
    \param  p_vertex - Vector3 of vertex
    *****************************************************************************************/
    template <class TVertex>
    bool addVertex(TVertex const& p_vertex);

    ///////============================================================================///////
    ///////   Private                                                                  ///////
    ///////============================================================================///////
private:

    /////================================================================================/////
    /////     Data                                                                       /////
    /////================================================================================/////
    size_t m_vertexCount;           //!< The amount of vertex in VBO
    size_t m_bufferSize;            //!< The size of the buffer
    size_t m_insertOffset;          //!< The offset into buffer
    char * m_buffer;                //!< The buffer of vertex
    unsigned m_handle;              //!< The handle to GPU object

};

template <typename TVertex>
bool vertexBufferObject::addVertex(TVertex const& p_vertex)
{

    TVertex * l_vertexBuffer = reinterpret_cast<TVertex *>(m_buffer);
    l_vertexBuffer[m_insertOffset++] = p_vertex;
    return true;

}
