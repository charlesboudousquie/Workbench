/*!***************************************************************************************
\file       Shader.hpp
\author     Cody Cannell
\date       6/19/18
\copyright  All content Â© 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief      This hold the CPU repersentation of the GPU shaders.
*****************************************************************************************/
#pragma once
//========1st Party Includes============================================================//
//========3rd Party Includes============================================================//
#include <GL/glew.h>
#include <GL/gl.h>

#include <string>

//========Types=========================================================================//
//========Defines=======================================================================//
//========Forward Deceleration==========================================================//

////////==========================================================================////////
////////  Struct / Class                                                          ////////
////////==========================================================================////////

class assetHandle;

/*!***************************************************************************************
\par class: shader
\brief   This hold the CPU repersentation of the GPU shaders.
*****************************************************************************************/
class shader
{
    ///////========================================================================///////
    ///////   Public                                                               ///////
    ///////========================================================================///////
public:

    //==================================================================================//
    //        Constructor                                                               //
    //==================================================================================//

    /*!***************************************************************************************
    \brief  Constructs a shader from a file
	\param  p_assetPath - the root path for all assets
    \param  p_fileName - the name of the file to be loaded in
    *****************************************************************************************/
    shader(assetHandle p_assetHandle);

    /*!***************************************************************************************
    \brief  Defualt Destructor
    *****************************************************************************************/
     ~shader(){}

    /*!***************************************************************************************
    \brief  Gets the shaders source file data 
    \return a string ref of the source file
    *****************************************************************************************/
    std::string & getSourceData() { return m_source; }

    /*!***************************************************************************************
    \brief  Can Set source data from a string
    \param  p_source_ - the string used to set internal source data
    *****************************************************************************************/
    void setSourceData(std::string p_source) { m_source = p_source; }

    /*!***************************************************************************************
    \brief  Gets the name of the shader
    \return a copy of the string name
    *****************************************************************************************/
    std::string getFileName() { return m_shaderName; }

    /*!***************************************************************************************
    \brief  sets the shaders handle 
    \param  p_handle -- number set as the handle
    *****************************************************************************************/
    void setHandle(GLuint p_handle) { m_handle = p_handle; }

    /*!***************************************************************************************
    \brief  returns handle number
    \return copy of the handle number
    *****************************************************************************************/
    GLuint getHandle() { return m_handle;  }

    ///////========================================================================///////
    ///////   Private                                                              ///////
    ///////========================================================================///////
private:

    /////============================================================================/////
    /////      Data                                                                  /////
    /////============================================================================/////
    GLuint m_handle = GLuint();            //!< The handle used to find GPU side shader
    std::string m_source;                  //!< hold the source file 
    std::string m_shaderName;              //!< the name of the shader for lookup
};
