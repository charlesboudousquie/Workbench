/*!***************************************************************************************
\file       VertexBufferObject.cpp
\author     Cody Cannell
\date       6/19/18
\copyright  All content Â© 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief      Holds all the vertex data for the object.
*****************************************************************************************/
#include "../Precompiled.h"
//========Self Include==================================================================//
#include "VertexBufferObject.hpp"
//========1st Party Includes============================================================//
//========3rd Party Includes============================================================//

//========Types=========================================================================//
//========Defines=======================================================================//
//========Static Deceleration===========================================================//

    ///////========================================================================///////
    ///////   Public                                                               ///////
    ///////========================================================================///////

        //==============================================================================//
        //        Constructor                                                           //
        //==============================================================================//
        vertexBufferObject::vertexBufferObject(size_t p_vertexCount, size_t p_vertexSize) : m_vertexCount(p_vertexCount),
                                                                                    m_bufferSize(p_vertexCount * p_vertexSize),
                                                                                    m_insertOffset(0),
                                                                                    m_buffer(new char[m_bufferSize]),
                                                                                    m_handle(0)
        {
        }
        //==============================================================================//
        //        Destructor                                                            //
        //==============================================================================//
        vertexBufferObject::~vertexBufferObject()
        {
            vertexBufferObject::shutdown();
            delete [] m_buffer;
        }
        //==============================================================================//
        //        Getters & Setters                                                     //
        //==============================================================================//
        size_t vertexBufferObject::getBufferSize() const
        {     
            return m_bufferSize;
        }
        ////==========================================================================////
        ////      Non-Virtual                                                         ////
        ////==========================================================================////

        //////======================================================================//////
        //////    Non-Static                                                        //////
        //////======================================================================//////

        /////========================================================================/////
        /////     Functions                                                          /////
        /////========================================================================/////
        void vertexBufferObject::build()
        {
            glGenBuffers(1, &m_handle);
            bind();
            glBufferData(GL_ARRAY_BUFFER, m_bufferSize, m_buffer, GL_STATIC_DRAW);
        }

        void vertexBufferObject::bind()
        {
            glBindBuffer(GL_ARRAY_BUFFER, m_handle);
        }

        void vertexBufferObject::unbind() const
        {
            glBindBuffer(GL_ARRAY_BUFFER, 0);
        }

        void vertexBufferObject::shutdown()
        {
            glDeleteBuffers(1, &m_handle);
        }


    ///////========================================================================///////
    ///////   Private                                                              ///////
    ///////========================================================================///////

        //////======================================================================//////
        //////    Non-Static                                                        //////
        //////======================================================================//////

        /////========================================================================/////
        /////     Functions                                                          /////
        /////========================================================================/////

        ////==========================================================================////
        ////      Non-Virtual                                                         ////
        ////==========================================================================////

        //==============================================================================//
        //        Helper                                                                //
        //==============================================================================//












