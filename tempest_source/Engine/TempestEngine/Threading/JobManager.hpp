/*!***************************************************************************************
\file       JobManager.hpp
\author     Michael-Paul Moore
\date       5/24/18
\copyright  All content ï¿½ 2017-2018 DigiPen (USA) Corporation, all rights reserved.
\par        Project: TBD
\brief  This is the job manager, give it a task and it will scheduled it, and run it on
        the threads you specify!
*****************************************************************************************/

#pragma once

//========1st Party Includes============================================================//
#include "Task.hpp"

//========3rd Party Includes============================================================//
#include <list>
#include <mutex>
#include <vector>
#include <thread>

////////==========================================================================////////
////////  Class                                                                   ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: jobManager
\brief   Manages jobs and tasks for multi-threaded computing. Should automatically handle
         timings and such based on specifications and good practices.
*****************************************************************************************/
class jobManager final
{
	///////============================================================================///////
	///////   Public                                                                   ///////
	///////============================================================================///////
	public:

		////////==========================================================================////////
		////////  Class                                                                   ////////
		////////==========================================================================////////

		/*!***************************************************************************************
		\par class: job
		\brief   Handles using tasks. Job class can be constructed in 2 ways. Setting the 'FPS',
		         or setting the frequency in seconds.
		*****************************************************************************************/
		class job final
		{
			///////============================================================================///////
			///////   Public                                                                   ///////
			///////============================================================================///////
			public:

				//////==============================================================================//////
				//////    Non-Static                                                                //////
				//////==============================================================================//////

				/////================================================================================/////
				/////     Functions                                                                  /////
				/////================================================================================/////

				////==================================================================================////
				////      Non-Virtual                                                                 ////
				////==================================================================================////

				//======================================================================================//
				//        Constructor                                                                   //
				//======================================================================================//

				/*!***************************************************************************************
				\brief  Using FPS to create a job
				\param max_fps - normal FPS for job
				\param fixed   - flag for fixed time step
				\param min_fps - FPS for load
				*****************************************************************************************/
				explicit job();

				//======================================================================================//
				//        Getters & Setters                                                            ///
				//======================================================================================//

				/*!***************************************************************************************
				\brief  Gets affinity of job
				\return affinity
				*****************************************************************************************/
				thread_number getAffinity() const;

				/*!***************************************************************************************
				\brief  Sets affinity of a job
				\param affinity -  to set
				*****************************************************************************************/
				void setAfinity(const thread_number & affinity);

				/*!***************************************************************************************
				\brief  Checks if we should reschedule job
				\return reschedule value
				*****************************************************************************************/
				bool shouldReschedule() const;

				/*!***************************************************************************************
				\brief  Adds task to a job
				\param new_task - task to add
				*****************************************************************************************/
				void giveTask(task* new_task);

				//======================================================================================//
				//        Helper                                                                        //
				//======================================================================================//

				/*!***************************************************************************************
				\brief  Checks if job can run again, if it can it resceduals it.
				\return  True if it can run, false if it can't.
				*****************************************************************************************/
				bool aged();

				/*!***************************************************************************************
				\brief  Clears tasks from job
				*****************************************************************************************/
				void clear();

				/*!***************************************************************************************
				\brief  Checks if job is empty.
				\return if it is empty
				*****************************************************************************************/
				bool empty() const;

				/*!***************************************************************************************
				\brief  Runs Update on all the tasks and set's thread to not in use
				*****************************************************************************************/
				void update();

			///////============================================================================///////
			///////   Private                                                                  ///////
			///////============================================================================///////
			private:
				//////==============================================================================//////
				//////    Non-Static                                                                //////
				//////==============================================================================//////

				/////================================================================================/////
				/////     Data                                                                       /////
				/////================================================================================/////

				////==================================================================================////
				////      Configurable                                                                ////
				////==================================================================================////

				std::chrono::duration<int, std::nano> m_max_frequency; //!< normal frequency
				bool                                  m_fixed;         /*!<  Is this job running at fixed
				                                                       * time step? */
				std::chrono::duration<int, std::nano> m_min_frequency; /*!< used in fixed time step to
				                                                       * attempt to recover from low fps
				                                                       * situations */

				////==================================================================================////
				////      Non-Configurable                                                            ////
				////==================================================================================////

				std::vector<task*> m_tasks; //!< vector of tasks contained in this job
				/* std::chrono::high_resolution_clock::time_point m_schedualedTime; // TODO: Implement   *
				 * with scheduling */
		};

		//////==============================================================================//////
		//////    Non-Static                                                                //////
		//////==============================================================================//////

		/////================================================================================/////
		/////     Functions                                                                  /////
		/////================================================================================/////

		////==================================================================================////
		////      Non-Virtual                                                                 ////
		////==================================================================================////

		//======================================================================================//
		//        Constructor                                                                   //
		//======================================================================================//

		/*!***************************************************************************************
		\brief  Creats with maxamum number of threads posible
		*****************************************************************************************/
		jobManager();

		//======================================================================================//
		//        Helper                                                                        //
		//======================================================================================//

		/*!***************************************************************************************
		\brief  Intelligently adds a task, soon
		\param p_task - task to add
		\return id of task created
		*****************************************************************************************/
		void giveTask(task* p_task);

		/*!***************************************************************************************
		\brief  Job manager does one update.
		*****************************************************************************************/
		void update();

		//======================================================================================//
		//        Destructor                                                                   ///
		//======================================================================================//
		~jobManager();

	///////============================================================================///////
	///////    Private                                                                 ///////
	///////============================================================================///////
	private:

		////////==========================================================================////////
		////////  Class                                                                   ////////
		////////==========================================================================////////

		/*!***************************************************************************************
		\par class: worker
		\brief   Get's the job done, doesn't look at explosions.
		*****************************************************************************************/
		class worker
		{
			///////============================================================================///////
			///////   Public                                                                   ///////
			///////============================================================================///////
			public:

				//////==============================================================================//////
				//////    Non-Static                                                                //////
				//////==============================================================================//////

				/////================================================================================/////
				/////     Functions                                                                  /////
				/////================================================================================/////

				////==================================================================================////
				////      Non-Virtual                                                                 ////
				////==================================================================================////

				//======================================================================================//
				//        Getters & Setters                                                            ///
				//======================================================================================//

				/*!***************************************************************************************
				\brief  Fire worker.
				*****************************************************************************************/
				void fire();

				/*!***************************************************************************************
				\brief  Checks if it has a job.
				\return True if something to do false if nothing to do
				*****************************************************************************************/
				bool hasSomethingToDo() const;

				/*!***************************************************************************************
				\brief  Removes job and gives it to the caller.
				\return Job that was just removed?
				*****************************************************************************************/
				job* submitWork();

				/*!***************************************************************************************
				\brief  Gives a job to the worker.
				\param p_job - job to give
				*****************************************************************************************/
				void giveJob(job * const p_job);

				/*!***************************************************************************************
				\brief  Is this job working.
				\return True if the job is working or about to work, false if it is not.
				*****************************************************************************************/
				bool isWorking() const;

				/*!***************************************************************************************
				\brief  Gets thread responsible for working.
				\return Thread inside worker?
				*****************************************************************************************/
				std::thread& getThread();

			///////============================================================================///////
			///////   Private                                                                  ///////
			///////============================================================================///////
			private:

				//////==============================================================================//////
				//////    Non-Static                                                                //////
				//////==============================================================================//////

				/////================================================================================/////
				/////     Functions                                                                  /////
				/////================================================================================/////

				////==================================================================================////
				////      Non-Virtual                                                                 ////
				////==================================================================================////

				//======================================================================================//
				//        Helper                                                                        //
				//======================================================================================//

				/*!***************************************************************************************
				\brief  Main loop for the worker, updates job it has available.
				*****************************************************************************************/
				void work();

				/////================================================================================/////
				/////     Data                                                                       /////
				/////================================================================================/////

				////==================================================================================////
				////      Non-Configurable                                                            ////
				////==================================================================================////

				bool        m_fired      = false;                            /*!< Is this worker still
				                                                             * employed? */
				job*        m_job_in_use = nullptr;                          /*!< current job this worker
				                                                             * is working on, or about
				                                                             * to */
				bool        m_working    = false;                            /*!< is it working or about
				                                                             * to start working */
				std::thread m_thread     = std::thread(&worker::work, this); //!< Make sure this is last!
		};

		//////==============================================================================//////
		//////    Non-Static                                                                //////
		//////==============================================================================//////

		/////================================================================================/////
		/////     Functions                                                                  /////
		/////================================================================================/////

		////==================================================================================////
		////      Non-Virtual                                                                 ////
		////==================================================================================////

		//======================================================================================//
		//        Helper                                                                        //
		//======================================================================================//

		/*!***************************************************************************************
		\brief  Logic for assigning job to worker. You need to lock and unlock m_jobs around this.
		\param current_thread - thread trying to get new job for
		\return Pointer to the job chosen, null is when no job is set, also handles removing job
		from list.
		*****************************************************************************************/
		job *chooseJob(const thread_number & current_thread);

		/*!***************************************************************************************
		\brief  Attempts to insert job into job list
		\param p_job - job to insert
		*****************************************************************************************/
		void insertJob(job * p_job);

		/*!***************************************************************************************
		\brief Get's the number of posible threads.
		\return Number of posible threads on this system
		*****************************************************************************************/
		thread_number setThreadCound();

		/////================================================================================/////
		/////     Data                                                                       /////
		/////================================================================================/////

		////==================================================================================////
		////      Non-Configurable                                                            ////
		////==================================================================================////

		std::pair<std::mutex, std::list<job*>> m_jobs;         /*!< list of jobs available to be
		                                                       * worked on */
		thread_number                          m_worker_count; //!< number of workers
		worker*                                m_workers;      //!< array of workers
};
