/*!***************************************************************************************
\file       SystemTask.hpp
\author     Michael-Paul Moore
\date       6/29/18
\copyright  All content Â© 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: TBD
\brief  System task class interface.
*****************************************************************************************/

#pragma once

//========1st Party Includes============================================================//
#include "Threading/JobManager.hpp"

//========Forward Deceleration==========================================================//
class systemBundle;
class systemManagerInterface;

////////==========================================================================////////
////////  Class                                                                   ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: systemTask
\brief   Handles the functionality of system bundles so they can be usable by the job
manager.
*****************************************************************************************/
class systemTask final : public task
{

	///////============================================================================///////
	///////   Public                                                                   ///////
	///////============================================================================///////
	public:

		//////==============================================================================//////
		//////    Non-Static                                                                //////
		//////==============================================================================//////

		/////================================================================================/////
		/////     Functions                                                                  /////
		/////================================================================================/////

		////==================================================================================////
		////      Non-Virtual                                                                 ////
		////==================================================================================////

		//======================================================================================//
		//        Constructor                                                                   //
		//======================================================================================//

		/*!***************************************************************************************
		\brief  Constructor
		\param system_bundle  - for main functionality
		\param thread_afinity - affinity given from systemBundle constructor
		*****************************************************************************************/
		systemTask(const systemBundle & system_bundle, const thread_number & thread_afinity);

		//======================================================================================//
		//        Helper                                                                        //
		//======================================================================================//

		/*!***************************************************************************************
		\brief  Waits for initialization to complete.
		*****************************************************************************************/
		void waitForInitialization() const;

		/*!***************************************************************************************
		\brief  Initialize system task
		\param system_manager  - system manager to store so systems can be initialized
		*****************************************************************************************/
		void sendInitialize(systemManagerInterface * system_manager);

		/*!***************************************************************************************
		\brief  Sends signal to start run.
		*****************************************************************************************/
		void sendRun();

		/*!***************************************************************************************
		\brief  Sends signal to suspend the task.
		*****************************************************************************************/
		void sendSuspend();

		/*!***************************************************************************************
		\brief  Sends shutdown signal to task.
		*****************************************************************************************/
		void sendShutdown();

	///////============================================================================///////
	///////   Public                                                                   ///////
	///////============================================================================///////
	private:

		//////==============================================================================//////
		//////    Non-Static                                                                //////
		//////==============================================================================//////

		////==================================================================================////
		////      Overridden                                                                  ////
		////==================================================================================////

		//======================================================================================//
		//        Helper                                                                        //
		//======================================================================================//

		/*!***************************************************************************************
		\brief  Runs current method pointer for task.
		*****************************************************************************************/
		void onUpdate() override;

		////==================================================================================////
		////      Non-Virtual                                                                 ////
		////==================================================================================////

		//======================================================================================//
		//        Helper                                                                        //
		//======================================================================================//

		/*!***************************************************************************************
		\brief  Runs initialize on all systems in bundle.
		*****************************************************************************************/
		void initialize();

		/*!***************************************************************************************
		\brief  Steps:
		1) startFrame on all systems in bundle
		1) update on all systems in bundle
		1) endFrame on all systems in bundle
		*****************************************************************************************/
		void update();

		/*!***************************************************************************************
		\brief  Runs shutdown on all the systems inside bundle.
		*****************************************************************************************/
		void shutDown();

		/////================================================================================/////
		/////     Data                                                                       /////
		/////================================================================================/////

		////==================================================================================////
		////      Non-Configurable                                                            ////
		////==================================================================================////

		const systemBundle  &m_sys_bndl;                 //!< systemBundle that holds this.
		      systemManagerInterface *m_system_manager = nullptr; //!< system manager that owns this.
		void (systemTask::*m_to_run)(void)   = nullptr;  //!< What method is run onUpdate.

		 /*!***************************************************************************************
		 \par enum: state
		 \brief Used for managing state of system task.
		 *****************************************************************************************/
		enum state
		{
			st_created,
			st_initializing,
			st_initialized, // also not running
			st_running,
			st_shutting_down,
			st_shut_down
		} m_state = st_created; //!< State this task is in.
};
