/*!***************************************************************************************
\file       DelayAction.cpp
\author     Aaron Damyen
\date       7/3/18
\copyright  All content © 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief  This is the implementation of the DelayAction class member functions.
*****************************************************************************************/

//========Self Include==================================================================//
#include "DelayAction.hpp"
//========1st Party Includes============================================================//
//========3rd Party Includes============================================================//
//========Types=========================================================================//
//========Defines=======================================================================//
//========Forward Deceleration==========================================================//

/////////========================================================================/////////
///////// Namespace                                                              /////////
/////////========================================================================/////////

////////==========================================================================////////
////////  Struct / Class                                                          ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: classExample
\brief   This is a stub class to be used as a template / example for class formating.
*****************************************************************************************/

///////============================================================================///////
///////   Public/Protected/Private                                                 ///////
///////============================================================================///////

//////==============================================================================//////
//////    (Non-)Static                                                              //////
//////==============================================================================//////

/////================================================================================/////
/////     Functions / Data                                                           /////
/////================================================================================/////

void delayAction::onUpdate(float p_dt)
{
    m_dt_remaining -= p_dt;
    if (m_dt_remaining <= 0.0f)
        complete();
}

void delayAction::onComplete()
{
    if (m_completeFunction != nullptr)
        m_completeFunction();
}

////==================================================================================////
////      (Non-)Configurable                                                          ////
////==================================================================================////

////==================================================================================////
////      Overridden/(Non-/Pure-)Virtual                                              ////
////==================================================================================////

//======================================================================================//
//        (Conversion )Constructor / Operators / Getters & Setters / Helper Destructor  //
//======================================================================================//

delayAction::delayAction(actionHandle p_handle, float p_delay, std::function<void()> p_complete_function)
    : action(p_handle), m_dt_remaining{ p_delay }, m_completeFunction{p_complete_function}
{ }

/*======================================================================================/
/         Other                                                                         /
//======================================================================================*/

// namespace <namespace name>


