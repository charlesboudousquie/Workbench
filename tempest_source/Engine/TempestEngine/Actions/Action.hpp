/*!***************************************************************************************
\file       Action.hpp
\author     Aaron Damyen
\date       6/13/2018
\copyright  All content Â© 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief  Defines a simple data structure representing an action within the actionSystem.
*****************************************************************************************/
#pragma once

//========1st Party Includes============================================================//

//========3rd Party Includes============================================================//

// type definitions
/*!***************************************************************************************
\par type: actionHandle
\brief   Defines a simple handle to an action.
*****************************************************************************************/
typedef unsigned int actionHandle;

////////==========================================================================////////
////////  Classes                                                                 ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: action
\brief   This is a simple action within the actionSystem.
*****************************************************************************************/
class action
{
	////////========================================================================////////
	////////   Public                                                               ////////
	////////========================================================================////////
public:

	/*!***************************************************************************************
	\brief  Constructs an action and initializes itself
	\param p_handle - The unique handle for this action.
	*****************************************************************************************/
	explicit action(actionHandle p_handle);
	/*!***************************************************************************************
	\brief  Destroys an action, releasing any allocated resources.
	*****************************************************************************************/
	virtual ~action() = default;
	/*!***************************************************************************************
	\brief  Signals this action that an update event has occurred.
	\param p_dt - The amount of time passed since the last update event, in seconds.
	*****************************************************************************************/
	void update(float p_dt);
	/*!***************************************************************************************
	\brief  Starts the action processing.
	*****************************************************************************************/
	void start();
	
	/*!***************************************************************************************
	\brief  Retrieves the handle for this action.
	\return actionHandle - The unique handle for this action.
	*****************************************************************************************/
	actionHandle getHandle() const;
	/*!***************************************************************************************
	\brief  Retrieves if this action is currently running.
	\return bool - Returns true if the action is running, false otherwise.
	*****************************************************************************************/
	bool isRunning() const;
	/*!***************************************************************************************
	\brief  Retrieves if this action has completed.
	\return bool - Returns true if the action has completed, false otherwise.
	*****************************************************************************************/
	bool isComplete() const;

	//////==============================================================================//////
	//////    (Non-)Static                                                              //////
	//////==============================================================================//////

	////////========================================================================////////
	////////   Protected                                                            ////////
	////////========================================================================////////
protected:

	/*!***************************************************************************************
	\brief  Changes the state of this action to completed.
	*****************************************************************************************/
	void complete();
	/*!***************************************************************************************
	\brief  Changes the state of this action to abort all processing, neither running nor completed.
	*****************************************************************************************/
	void abort();
	
	/*!***************************************************************************************
	\brief  Notifies the action that an update event has occurred.
	\param p_dt - The amount of time passed since the last update event.
	*****************************************************************************************/
	virtual void onUpdate(float p_dt) = 0;
	/*!***************************************************************************************
	\brief  Notifies the action that it has started processing.
	*****************************************************************************************/
	virtual void onStart() {};
	/*!***************************************************************************************
	\brief  Notifies the action that it has completed processing.
	*****************************************************************************************/
	virtual void onComplete() {};

	//////==============================================================================//////
	//////    (Non-)Static                                                              //////
	//////==============================================================================//////

	////////========================================================================////////
	////////   Private                                                              ////////
	////////========================================================================////////
private:

	/*!***************************************************************************************
	\par enum: actionState
	\brief  Lists the different states an action may be in.
	*****************************************************************************************/
	enum actionState { STOPPED, START_REQUESTED, RUNNING, COMPLETE };

	actionHandle m_handle; //!< This action's unique handle.
	actionState m_state;   //!< This action's current state.

	//////==============================================================================//////
	//////    (Non-)Static                                                              //////
	//////==============================================================================//////

};

