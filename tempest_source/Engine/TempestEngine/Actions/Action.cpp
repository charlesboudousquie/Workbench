/*!***************************************************************************************
\file       Action.cpp
\author     Aaron Damyen
\date       7/3/18
\copyright  All content © 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief  This is the implementation of the Action class member functions.
*****************************************************************************************/

//========Self Include==================================================================//
#include "Action.hpp"
//========1st Party Includes============================================================//
//========3rd Party Includes============================================================//
//========Types=========================================================================//
//========Defines=======================================================================//
//========Forward Deceleration==========================================================//

/////////========================================================================/////////
///////// Namespace                                                              /////////
/////////========================================================================/////////

////////==========================================================================////////
////////  Struct / Class                                                          ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: classExample
\brief   This is a stub class to be used as a template / example for class formating.
*****************************************************************************************/

///////============================================================================///////
///////   Public/Protected/Private                                                 ///////
///////============================================================================///////

//////==============================================================================//////
//////    (Non-)Static                                                              //////
//////==============================================================================//////

/////================================================================================/////
/////     Functions / Data                                                           /////
/////================================================================================/////

void action::update(float p_dt)
{
    if (m_state == START_REQUESTED)
    {
        onStart();
        m_state = RUNNING;
    }

    if (m_state == RUNNING)
        onUpdate(p_dt);
}

void action::start()
{
    if (m_state == STOPPED)
        m_state = START_REQUESTED;
}

void action::complete()
{
    m_state = COMPLETE;
    onComplete();
}

void action::abort()
{
    m_state = STOPPED;
}

////==================================================================================////
////      (Non-)Configurable                                                          ////
////==================================================================================////

////==================================================================================////
////      Overridden/(Non-/Pure-)Virtual                                              ////
////==================================================================================////

//======================================================================================//
//        (Conversion )Constructor / Operators / Getters & Setters / Helper Destructor  //
//======================================================================================//

action::action(actionHandle p_handle) : m_handle{p_handle}, m_state{STOPPED}
{ }

actionHandle action::getHandle() const
{
    return m_handle;
}

bool action::isRunning() const
{
    return m_state == RUNNING || m_state == START_REQUESTED;
}

bool action::isComplete() const
{
    return m_state == COMPLETE;
}


/*======================================================================================/
/         Other                                                                         /
//======================================================================================*/

// namespace <namespace name>
