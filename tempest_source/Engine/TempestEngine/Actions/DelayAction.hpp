/*!***************************************************************************************
\file       DelayAction.hpp
\author     Aaron Damyen
\date       6/15/18
\copyright  All content Â© 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief  Definition of the delayAction class.
*****************************************************************************************/
#pragma once

//========1st Party Includes============================================================//
#include "Action.hpp"

#include <functional>

//========3rd Party Includes============================================================//

////////==========================================================================////////
////////  Classes                                                                 ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: delayAction
\brief   An action that is delayed for some amount of time before executing.
*****************************************************************************************/
class delayAction : public action
{
	////////========================================================================////////
	////////   Public                                                               ////////
	////////========================================================================////////
public:

	/*!***************************************************************************************
	\brief  Constructs a delay action and initializes it.
	\param p_handle - This action's handle, assigned by the actionSystem.
	\param p_delay - The amount to time to delay, in seconds.
	\param p_complete_function - The function to call at the end of the delay.
	*****************************************************************************************/
	delayAction(actionHandle p_handle, float p_delay, std::function<void()> p_complete_function);
	
	//////==============================================================================//////
	//////    (Non-)Static                                                              //////
	//////==============================================================================//////

	////////========================================================================////////
	////////   Protected                                                            ////////
	////////========================================================================////////
protected:

	/*!***************************************************************************************
	\brief  Notification that an update event has occured.
	\param p_dt - The amount of time since the last update event.
	*****************************************************************************************/
	void onUpdate(float p_dt) override;
	/*!***************************************************************************************
	\brief  Notification that the action has completed.
	*****************************************************************************************/
	void onComplete() override;

	//////==============================================================================//////
	//////    (Non-)Static                                                              //////
	//////==============================================================================//////

	////////========================================================================////////
	////////   Private                                                              ////////
	////////========================================================================////////
private:

	float m_dt_remaining; //!< The amount of time this action needs to yet wait.
	std::function<void()> m_completeFunction; //!< Function to call when time expires.

	//////==============================================================================//////
	//////    (Non-)Static                                                              //////
	//////==============================================================================//////

};


