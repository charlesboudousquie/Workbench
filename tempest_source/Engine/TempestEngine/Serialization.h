/*!***************************************************************************************
\file       Serialization.cpp
\author     Michael-Paul Moore
\date       7/12/18
\copyright  All content © 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief  Has everything we need for serialization with rapid json.
*****************************************************************************************/

#pragma once

//========3rd Party Includes============================================================//
#include "document.h"
#include <stringbuffer.h>
#include <writer.h>
#include "SceneManagement/GameObject.hpp"
#include <prettywriter.h>

//========Forward Deceleration==========================================================//
class type;

////////==========================================================================////////
////////  Class                                                                   ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: serializationSystem
\brief   This is a stub class to be used as a template / example for class formating.
*****************************************************************************************/
class jsonSerialization final
{
	///////============================================================================///////
	///////   Public                                                                   ///////
	///////============================================================================///////
	public:

		//////==============================================================================//////
		//////    Non-Static                                                                //////
		//////==============================================================================//////

		/////================================================================================/////
		/////     Functions                                                                  /////
		/////================================================================================/////

		////==================================================================================////
		////      Non-Virtual                                                                 ////
		////==================================================================================////

		//======================================================================================//
		//        Helper                                                                        //
		//======================================================================================//

		/*!***************************************************************************************
		\brief  Converts a pointer to a game object to the JSON string equivalent.
		\param p_game_object - game object pointer to convert
		\return Game object as a string in JSON format.
		*****************************************************************************************/
		//static std::string gameObjecToStream(void* p_game_object);

		static std::string typeToStream(typeRT & p_type);

		static typeRT streamToType(const std::string & p_type);

	///////============================================================================///////
	///////   Private                                                                  ///////
	///////============================================================================///////
	private: //TODO(MP): corect

		//////==============================================================================//////
		//////    Non-Static                                                                //////
		//////==============================================================================//////

		/////================================================================================/////
		/////     Functions                                                                  /////
		/////================================================================================/////

		////==================================================================================////
		////      Non-Virtual                                                                 ////
		////==================================================================================////

		//======================================================================================//
		//        Helper                                                                        //
		//======================================================================================//

		/*!***************************************************************************************
		\brief  Converts a type to a rapidjson::Document.
		\param p_type - to convert
		\param result - rapidjson::Document to populate
		\param allocator - of master document
		*****************************************************************************************/
		static void type_to_document(typeRT & p_type, rapidjson::Document& result,
		                             rapidjson::Document::AllocatorType& allocator);

		/*!***************************************************************************************
		\brief  Converts a type to a rapidjson::Document.
		\param input - what document to convert to a type
		\return Type equivalent of rapidjson::Document
		*****************************************************************************************/
		static typeRT document_to_type(const rapidjson::Value& input);
};
