/*!***************************************************************************************
\file       MessageQueue.hpp
\author     Aaron Damyen
\date       8/12/18
\copyright  All content © 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief  Handles the queue of messages for systems
*****************************************************************************************/
#pragma once

//========1st Party Includes============================================================//
#include "Message.hpp"

//========3rd Party Includes============================================================//
#include <mutex>
#include <queue>

//========Forward Declarations==========================================================//
class messagingSystem;

////////==========================================================================////////
////////  Classes                                                                 ////////
////////==========================================================================////////

/*!***************************************************************************************
\par class: messageQueue
\brief  Manages the queue of messages for systems.
*****************************************************************************************/
class messageQueue final
{
	////////========================================================================////////
	////////   Public                                                               ////////
	////////========================================================================////////
public:

	//////==============================================================================//////
	//////    (Non-)Static                                                              //////
	//////==============================================================================//////

	    void send(std::string p_sender, std::string p_destination, unsigned int p_message_code, void * p_data);
		void onHandleMessage();

	////////========================================================================////////
	////////   Private                                                              ////////
	////////========================================================================////////
private:

	message pop();
	bool empty();

	static std::mutex m_lock;
	std::queue<message> m_messages;

	void onInitialize();
	void onShutdown();
	friend messagingSystem;
};


