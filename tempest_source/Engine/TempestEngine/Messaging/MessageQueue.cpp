/*!***************************************************************************************
\file       MessageQueue.cpp
\author     Aaron Damyen
\date       8/12/18
\copyright  All content © 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief  This is the implementation of messageQueue member functions
*****************************************************************************************/

//========Self Include==================================================================//
#include "MessageQueue.hpp"
#include <Logger.hpp>

//========1st Party Includes============================================================//
//========3rd Party Includes============================================================//
//========Types=========================================================================//
//========Defines=======================================================================//
//========Static Deceleration===========================================================//
std::mutex messageQueue::m_lock;

///////========================================================================///////
///////   Public                                                               ///////
///////========================================================================///////

//==============================================================================//
//        Constructor                                                           //
//==============================================================================//

//==============================================================================//
//        Destructor                                                            //
//==============================================================================//

//==============================================================================//
//        Getters & Setters                                                     //
//==============================================================================//

////==========================================================================////
////      Non-Virtual                                                         ////
////==========================================================================////

//////======================================================================//////
//////    Non-Static                                                        //////
//////======================================================================//////

/////========================================================================/////
/////     Functions                                                          /////
/////========================================================================/////

void messageQueue::send(std::string p_sender, std::string p_destination, unsigned int p_message_code, void * p_data)
{
	message msg;
	msg.m_sender = p_sender;
	msg.m_destination = p_destination;
	msg.m_message_code = p_message_code;
	msg.m_data = p_data;

	std::lock_guard<std::mutex> l_lock(m_lock);
	m_messages.push(msg);
}

message messageQueue::pop()
{
	logger l_logger("MessageQueue");
	std::lock_guard<std::mutex> l_lock(m_lock);
	l_logger.error() << "in messageQueue::pop()";
	message l_result = m_messages.front();
	l_logger.error() << "   after front()";
	m_messages.pop();
	l_logger.error() << "   after pop()";
	return l_result;
}

bool messageQueue::empty()
{
	std::lock_guard<std::mutex> l_lock(m_lock);
	return m_messages.empty();
}

///////========================================================================///////
///////   Private                                                              ///////
///////========================================================================///////

//////======================================================================//////
//////    Non-Static                                                        //////
//////======================================================================//////

/////========================================================================/////
/////     Functions                                                          /////
/////========================================================================/////

void messageQueue::onInitialize()
{
	// do nothing
}

void messageQueue::onShutdown()
{
	// clear out the queue
	std::lock_guard<std::mutex> l_lock(m_lock);
	while(!m_messages.empty())
		m_messages.pop();
}

////==========================================================================////
////      Non-Virtual                                                         ////
////==========================================================================////

//==============================================================================//
//        Helper                                                                //
//==============================================================================//


